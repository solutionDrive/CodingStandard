--- a/bin/ecs.php
+++ b/bin/ecs.php
@@ -69,6 +69,21 @@
         if (!\is_file($path)) {
             return;
         }
+
+        // Verify that the autoloader has not already been included during the creation of the PHAR.
+        $composerAutoloadInitClassNames = array_filter(
+            get_declared_classes(),
+            fn($className) => preg_match('/^ComposerAutoloaderInit/', $className)
+        );
+
+        $autoloaderSource = file_get_contents($path);
+        foreach ($composerAutoloadInitClassNames as $autoloadInitClassName) {
+            if (strpos($autoloaderSource, $autoloadInitClassName) !== false) {
+                echo $autoloadInitClassName . 'is already loaded';
+                return;
+            }
+        }
+
         $this->loadIfNotLoadedYet($path);
     }
     public function includePhpCodeSnifferAutoloadIfNotInPharAndInitliazeTokens() : void
@@ -106,13 +121,36 @@
         if (\in_array($file, $this->alreadyLoadedAutoloadFiles, \true)) {
             return;
         }
-        $realPath = \realpath($file);
-        if (!\is_string($realPath)) {
-            return;
-        }
+        // Use a custom function to normalize the path, since realpath cannot be used in the PHAR file context.
+        $realPath = $this->normalizePath($file);
         $this->alreadyLoadedAutoloadFiles[] = $realPath;
         require_once $file;
     }
+
+    /**
+     * @source https://stackoverflow.com/a/20545583
+     */
+    private function normalizePath($path, $separator = '\\/')
+    {
+        // Remove any kind of funky unicode whitespace
+        $normalized = preg_replace('#\p{C}+|^\./#u', '', $path);
+
+        // Path remove self referring paths ("/./").
+        $normalized = preg_replace('#/\.(?=/)|^\./|\./$#', '', $normalized);
+
+        // Regex for resolving relative paths
+        $regex = '#\/*[^/\.]+/\.\.#Uu';
+
+        while (preg_match($regex, $normalized)) {
+            $normalized = preg_replace($regex, '', $normalized);
+        }
+
+        if (preg_match('#/\.{2}|\.{2}/#', $normalized)) {
+            throw new LogicException('Path is outside of the defined root, path: [' . $path . '], resolved: [' . $normalized . ']');
+        }
+
+        return trim($normalized, $separator);
+    }
 }
 try {
     $input = new ArgvInput();
